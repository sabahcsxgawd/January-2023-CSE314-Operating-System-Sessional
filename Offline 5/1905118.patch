diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..7aeab1b 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -173,6 +173,7 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+int             uvmmirror(pagetable_t, pagetable_t, uint64)
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..118b2c1 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,31 +101,37 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
 static uint64 (*syscalls[])(void) = {
-[SYS_fork]    sys_fork,
-[SYS_exit]    sys_exit,
-[SYS_wait]    sys_wait,
-[SYS_pipe]    sys_pipe,
-[SYS_read]    sys_read,
-[SYS_kill]    sys_kill,
-[SYS_exec]    sys_exec,
-[SYS_fstat]   sys_fstat,
-[SYS_chdir]   sys_chdir,
-[SYS_dup]     sys_dup,
-[SYS_getpid]  sys_getpid,
-[SYS_sbrk]    sys_sbrk,
-[SYS_sleep]   sys_sleep,
-[SYS_uptime]  sys_uptime,
-[SYS_open]    sys_open,
-[SYS_write]   sys_write,
-[SYS_mknod]   sys_mknod,
-[SYS_unlink]  sys_unlink,
-[SYS_link]    sys_link,
-[SYS_mkdir]   sys_mkdir,
-[SYS_close]   sys_close,
+[SYS_fork]            sys_fork,
+[SYS_exit]            sys_exit,
+[SYS_wait]            sys_wait,
+[SYS_pipe]            sys_pipe,
+[SYS_read]            sys_read,
+[SYS_kill]            sys_kill,
+[SYS_exec]            sys_exec,
+[SYS_fstat]           sys_fstat,
+[SYS_chdir]           sys_chdir,
+[SYS_dup]             sys_dup,
+[SYS_getpid]          sys_getpid,
+[SYS_sbrk]            sys_sbrk,
+[SYS_sleep]           sys_sleep,
+[SYS_uptime]          sys_uptime,
+[SYS_open]            sys_open,
+[SYS_write]           sys_write,
+[SYS_mknod]           sys_mknod,
+[SYS_unlink]          sys_unlink,
+[SYS_link]            sys_link,
+[SYS_mkdir]           sys_mkdir,
+[SYS_close]           sys_close,
+[SYS_thread_create]   sys_thread_create,
+[SYS_thread_join]     sys_thread_join,
+[SYS_thread_exit]     sys_thread_exit,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..0e974c0 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -1,22 +1,25 @@
 // System call numbers
-#define SYS_fork    1
-#define SYS_exit    2
-#define SYS_wait    3
-#define SYS_pipe    4
-#define SYS_read    5
-#define SYS_kill    6
-#define SYS_exec    7
-#define SYS_fstat   8
-#define SYS_chdir   9
-#define SYS_dup    10
-#define SYS_getpid 11
-#define SYS_sbrk   12
-#define SYS_sleep  13
-#define SYS_uptime 14
-#define SYS_open   15
-#define SYS_write  16
-#define SYS_mknod  17
-#define SYS_unlink 18
-#define SYS_link   19
-#define SYS_mkdir  20
-#define SYS_close  21
+#define SYS_fork            1
+#define SYS_exit            2
+#define SYS_wait            3
+#define SYS_pipe            4
+#define SYS_read            5
+#define SYS_kill            6
+#define SYS_exec            7
+#define SYS_fstat           8
+#define SYS_chdir           9
+#define SYS_dup            10
+#define SYS_getpid         11
+#define SYS_sbrk           12
+#define SYS_sleep          13
+#define SYS_uptime         14
+#define SYS_open           15
+#define SYS_write          16
+#define SYS_mknod          17
+#define SYS_unlink         18
+#define SYS_link           19
+#define SYS_mkdir          20
+#define SYS_close          21
+#define SYS_thread_create  22
+#define SYS_thread_join    23
+#define SYS_thread_exit    24
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..050d6c2 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,37 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+uint64
+sys_thread_create(void)
+{
+  uint xticks;
+
+  acquire(&tickslock);
+  xticks = ticks;
+  release(&tickslock);
+  return xticks;
+}
+
+uint64
+sys_thread_join(void)
+{
+  uint xticks;
+
+  acquire(&tickslock);
+  xticks = ticks;
+  release(&tickslock);
+  return xticks;
+}
+
+uint64
+sys_thread_exit(void)
+{
+  uint xticks;
+
+  acquire(&tickslock);
+  xticks = ticks;
+  release(&tickslock);
+  return xticks;
+}
\ No newline at end of file
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..423cf7f 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -332,6 +332,31 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+int
+uvmmirror(pagetable_t old, pagetable_t new, uint64 sz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);    
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){      
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 0);
+  return -1;
+}
+
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
diff --git a/user/user.h b/user/user.h
index 4d398d5..b44be60 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int thread_create(void(*fcn)(void*), void *arg, void*stack);
+int thread_join(int thread_id);
+int thread_exit(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..a334aa7 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create");
+entry("thread_join");
+entry("thread_exit");
