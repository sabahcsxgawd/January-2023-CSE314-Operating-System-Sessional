diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..ca0f549
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,7 @@
+{
+    "files.associations": {
+        "types.h": "c",
+        "spinlock.h": "c",
+        "type_traits": "c"
+    }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 39a99d7..7fc01f0 100644
--- a/Makefile
+++ b/Makefile
@@ -87,7 +87,7 @@ $U/initcode: $U/initcode.S
 tags: $(OBJS) _init
 	etags *.S *.c
 
-ULIB = $U/ulib.o $U/usys.o $U/printf.o $U/umalloc.o
+ULIB = $U/ulib.o $U/usys.o $U/printf.o $U/umalloc.o $U/spinlock.o $U/mutex.o $U/queue.o $U/condvar.o $U/semaphore.o
 
 _%: %.o $(ULIB)
 	$(LD) $(LDFLAGS) -T $U/user.ld -o $@ $^
@@ -132,6 +132,15 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_threads\
+	$U/_mtxtest\
+	$U/_condvartest\
+	$U/_semtest\
+	$U/_producer_consumer\
+	$U/_jointest\
+	$U/_abirtest\
+	$U/_ashttest1\
+	$U/_ashttest2\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..6e0778f 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -89,6 +89,7 @@ int             growproc(int);
 void            proc_mapstacks(pagetable_t);
 pagetable_t     proc_pagetable(struct proc *);
 void            proc_freepagetable(pagetable_t, uint64);
+void            thread_freepagetable(pagetable_t, uint64);
 int             kill(int);
 int             killed(struct proc*);
 void            setkilled(struct proc*);
@@ -106,6 +107,12 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             clone(uint64 fcn, uint64 arg, uint64 stack);
+int             join(int);
+void            acquire_mem_lock(int);
+void            release_mem_lock(int);
+int             condvar_release_sleep(uint64);
+void            condvar_wakeup(int);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -173,6 +180,8 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+int             uvmmirror(pagetable_t, pagetable_t, uint64, uint64);
+void            thread_uvmfree(pagetable_t, uint64);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..9a7b1bc 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -53,6 +53,7 @@ procinit(void)
   initlock(&wait_lock, "wait_lock");
   for(p = proc; p < &proc[NPROC]; p++) {
       initlock(&p->lock, "proc");
+      initlock(&p->memlock, "mem");
       p->state = UNUSED;
       p->kstack = KSTACK((int) (p - proc));
   }
@@ -124,6 +125,7 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  p->mem_id = p->pid;
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
@@ -158,11 +160,21 @@ freeproc(struct proc *p)
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
-    proc_freepagetable(p->pagetable, p->sz);
+  acquire_mem_lock(p->mem_id);
+  if(p->pagetable) {
+    if(p->is_thread == 1) {
+      thread_freepagetable(p->pagetable, p->sz);
+    }
+    else if(p->is_thread == 0) {
+      proc_freepagetable(p->pagetable, p->sz);
+    }
+  }
+  release_mem_lock(p->mem_id);
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
+  p->mem_id = 0;
+  p->is_thread = 0;
   p->parent = 0;
   p->name[0] = 0;
   p->chan = 0;
@@ -215,6 +227,14 @@ proc_freepagetable(pagetable_t pagetable, uint64 sz)
   uvmfree(pagetable, sz);
 }
 
+void
+thread_freepagetable(pagetable_t pagetable, uint64 sz)
+{
+  uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+  uvmunmap(pagetable, TRAPFRAME, 1, 0);
+  thread_uvmfree(pagetable, sz);
+}
+
 // a user program that calls exec("/init")
 // assembled from ../user/initcode.S
 // od -t xC ../user/initcode
@@ -260,17 +280,43 @@ int
 growproc(int n)
 {
   uint64 sz;
-  struct proc *p = myproc();
+  struct proc *p = myproc(), *pp;
+  int is_alloc = 0; // 1 for uvmalloc; 2 for uvmdealloc
+
+  // acquire mem locks of same mem id
+  acquire_mem_lock(p->mem_id);
 
   sz = p->sz;
   if(n > 0){
+    is_alloc = 1;
     if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
+      release_mem_lock(p->mem_id);
       return -1;
     }
   } else if(n < 0){
+    is_alloc = 2;
     sz = uvmdealloc(p->pagetable, sz, sz + n);
   }
   p->sz = sz;
+
+  for(pp = proc; pp < &proc[NPROC]; pp++) {
+    if((pp->pid != p->pid) && (pp->mem_id == p->mem_id)) {
+      if(is_alloc == 1) {
+        uvmmirror(p->pagetable, pp->pagetable, pp->sz, p->sz);
+        pp->sz = p->sz;
+      }
+      else if(is_alloc == 2) {
+        uvmunmap(pp->pagetable, PGROUNDUP(p->sz), ((PGROUNDUP(pp->sz) - PGROUNDUP(p->sz)) / PGSIZE), 0);
+        pp->sz = p->sz;
+      }
+    }
+  }
+
+  // release mem locks of same mem id
+  release_mem_lock(p->mem_id);
+
+
+
   return 0;
 }
 
@@ -325,6 +371,65 @@ fork(void)
   return pid;
 }
 
+int
+clone(uint64 fcn, uint64 arg, uint64 stack)
+{
+  int i, pid;
+  struct proc *np;
+  struct proc *p = myproc();
+
+  // Allocate process.
+  if((np = allocproc()) == 0){
+    return -1;
+  }
+
+  // Copy user memory from parent to child.
+  acquire_mem_lock(p->mem_id);
+  if(uvmmirror(p->pagetable, np->pagetable, 0, p->sz) < 0){
+    release_mem_lock(p->mem_id);
+    freeproc(np);
+    release(&np->lock);
+    return -1;
+  }
+  release_mem_lock(p->mem_id);
+  np->sz = p->sz;
+  np->mem_id = p->mem_id;
+
+  // copy saved user registers.
+  *(np->trapframe) = *(p->trapframe);
+
+  // Cause fork to return 0 in the child.
+  np->trapframe->a0 = arg;
+  np->trapframe->epc = fcn;
+  uint64 sp = stack + PGSIZE;
+  sp -= sp % 16;
+  np->trapframe->sp = sp;
+  np->is_thread = 1;
+  np->trapframe->ra = 0xffffffff;
+
+  // increment reference counts on open file descriptors.
+  for(i = 0; i < NOFILE; i++)
+    if(p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+
+  release(&np->lock);
+
+  acquire(&wait_lock);
+  np->parent = p;
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  release(&np->lock);
+
+  return pid;
+}
+
 // Pass p's abandoned children to init.
 // Caller must hold wait_lock.
 void
@@ -371,7 +476,12 @@ exit(int status)
   reparent(p);
 
   // Parent might be sleeping in wait().
-  wakeup(p->parent);
+  if(p->is_thread == 0) {
+    wakeup(p->parent);
+  }  
+  else {
+    wakeup(p);
+  }
   
   acquire(&p->lock);
 
@@ -434,6 +544,46 @@ wait(uint64 addr)
   }
 }
 
+int
+join(int thread_id)
+{
+  struct proc *pp;
+  int pid;
+  void* chan = 0;
+  struct proc *p = myproc();
+
+  acquire(&wait_lock);
+
+  for(;;){
+    chan = 0;
+    for(pp = proc; pp < &proc[NPROC]; pp++){
+      if(pp->pid == thread_id && pp->mem_id == p->mem_id){
+        // make sure the child isn't still in exit() or swtch().
+        acquire(&pp->lock);
+        chan = pp;
+        if(pp->state == ZOMBIE){
+          // Found one.
+          pid = pp->pid;
+          freeproc(pp);
+          release(&pp->lock);
+          release(&wait_lock);
+          return pid;
+        }
+        release(&pp->lock);        
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(killed(p)){
+      release(&wait_lock);
+      return -1;
+    }
+
+    // Wait for a child to exit.
+    sleep(chan, &wait_lock);  //DOC: wait-sleep
+  }
+}
+
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
@@ -571,7 +721,7 @@ wakeup(void *chan)
   for(p = proc; p < &proc[NPROC]; p++) {
     if(p != myproc()){
       acquire(&p->lock);
-      if(p->state == SLEEPING && p->chan == chan) {
+      if(p->state == SLEEPING && p->chan == chan) {        
         p->state = RUNNABLE;
       }
       release(&p->lock);
@@ -659,12 +809,12 @@ void
 procdump(void)
 {
   static char *states[] = {
-  [UNUSED]    "unused",
-  [USED]      "used",
+  [UNUSED]    "unused ",
+  [USED]      "used ",
   [SLEEPING]  "sleep ",
-  [RUNNABLE]  "runble",
-  [RUNNING]   "run   ",
-  [ZOMBIE]    "zombie"
+  [RUNNABLE]  "runble ",
+  [RUNNING]   "run ",
+  [ZOMBIE]    "zombie "
   };
   struct proc *p;
   char *state;
@@ -681,3 +831,73 @@ procdump(void)
     printf("\n");
   }
 }
+
+void acquire_mem_lock(int mem_id) {
+  struct proc *p;
+  for(p = proc; p < &proc[NPROC]; p++) {
+    if(p->mem_id == mem_id) {
+      acquire(&p->memlock);
+    }
+  }
+}
+
+void release_mem_lock(int mem_id) {
+  struct proc *p;
+  for(p = proc; p < &proc[NPROC]; p++) {
+    if(p->mem_id == mem_id) {
+      release(&p->memlock);
+    }
+  }
+}
+
+
+int
+condvar_release_sleep(uint64 condvar_mtx_lock_va)
+{
+  struct proc *p = myproc();
+  
+
+  acquire(&p->lock);  //DOC: sleeplock1
+
+  // Go to sleep.
+  p->state = SLEEPING;
+
+  uint64 va0, pa0;
+
+  va0 = PGROUNDDOWN(condvar_mtx_lock_va);
+  acquire_mem_lock(p->mem_id);
+  pa0 = walkaddr(p->pagetable, va0);
+  release_mem_lock(p->mem_id);
+  if(pa0 == 0)
+    return -1;
+
+  __sync_synchronize();
+  __sync_lock_release((uint8*)(pa0 + (condvar_mtx_lock_va - va0)));
+
+  // p->state = SLEEPING;
+
+  sched();
+
+
+  // Reacquire original lock.
+  release(&p->lock);
+
+  return 0;
+
+}
+
+void
+condvar_wakeup(int thread_id)
+{
+  struct proc *p;
+
+  for(p = proc; p < &proc[NPROC]; p++) {
+    if(p != myproc()){
+      acquire(&p->lock);
+      if(p->state == SLEEPING && p->pid == thread_id) {
+        p->state = RUNNABLE;
+      }
+      release(&p->lock);
+    }
+  }
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..c000833 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,9 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  // extras
+  struct spinlock memlock;
+  int is_thread;
+  int mem_id;
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..ed0cc62 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,31 +101,42 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
+extern uint64 sys_condvar_release_sleep(void);
+extern uint64 sys_condvar_wakeup(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
 static uint64 (*syscalls[])(void) = {
-[SYS_fork]    sys_fork,
-[SYS_exit]    sys_exit,
-[SYS_wait]    sys_wait,
-[SYS_pipe]    sys_pipe,
-[SYS_read]    sys_read,
-[SYS_kill]    sys_kill,
-[SYS_exec]    sys_exec,
-[SYS_fstat]   sys_fstat,
-[SYS_chdir]   sys_chdir,
-[SYS_dup]     sys_dup,
-[SYS_getpid]  sys_getpid,
-[SYS_sbrk]    sys_sbrk,
-[SYS_sleep]   sys_sleep,
-[SYS_uptime]  sys_uptime,
-[SYS_open]    sys_open,
-[SYS_write]   sys_write,
-[SYS_mknod]   sys_mknod,
-[SYS_unlink]  sys_unlink,
-[SYS_link]    sys_link,
-[SYS_mkdir]   sys_mkdir,
-[SYS_close]   sys_close,
+[SYS_fork]                     sys_fork,
+[SYS_exit]                     sys_exit,
+[SYS_wait]                     sys_wait,
+[SYS_pipe]                     sys_pipe,
+[SYS_read]                     sys_read,
+[SYS_kill]                     sys_kill,
+[SYS_exec]                     sys_exec,
+[SYS_fstat]                    sys_fstat,
+[SYS_chdir]                    sys_chdir,
+[SYS_dup]                      sys_dup,
+[SYS_getpid]                   sys_getpid,
+[SYS_sbrk]                     sys_sbrk,
+[SYS_sleep]                    sys_sleep,
+[SYS_uptime]                   sys_uptime,
+[SYS_open]                     sys_open,
+[SYS_write]                    sys_write,
+[SYS_mknod]                    sys_mknod,
+[SYS_unlink]                   sys_unlink,
+[SYS_link]                     sys_link,
+[SYS_mkdir]                    sys_mkdir,
+[SYS_close]                    sys_close,
+[SYS_thread_create]            sys_thread_create,
+[SYS_thread_join]              sys_thread_join,
+[SYS_thread_exit]              sys_thread_exit,
+[SYS_condvar_release_sleep]    sys_condvar_release_sleep,
+[SYS_condvar_wakeup]           sys_condvar_wakeup,   
+
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..70e3e81 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -1,22 +1,27 @@
 // System call numbers
-#define SYS_fork    1
-#define SYS_exit    2
-#define SYS_wait    3
-#define SYS_pipe    4
-#define SYS_read    5
-#define SYS_kill    6
-#define SYS_exec    7
-#define SYS_fstat   8
-#define SYS_chdir   9
-#define SYS_dup    10
-#define SYS_getpid 11
-#define SYS_sbrk   12
-#define SYS_sleep  13
-#define SYS_uptime 14
-#define SYS_open   15
-#define SYS_write  16
-#define SYS_mknod  17
-#define SYS_unlink 18
-#define SYS_link   19
-#define SYS_mkdir  20
-#define SYS_close  21
+#define SYS_fork                   1
+#define SYS_exit                   2
+#define SYS_wait                   3
+#define SYS_pipe                   4
+#define SYS_read                   5
+#define SYS_kill                   6
+#define SYS_exec                   7
+#define SYS_fstat                  8
+#define SYS_chdir                  9
+#define SYS_dup                   10
+#define SYS_getpid                11
+#define SYS_sbrk                  12
+#define SYS_sleep                 13
+#define SYS_uptime                14
+#define SYS_open                  15
+#define SYS_write                 16
+#define SYS_mknod                 17
+#define SYS_unlink                18
+#define SYS_link                  19
+#define SYS_mkdir                 20
+#define SYS_close                 21
+#define SYS_thread_create         22
+#define SYS_thread_join           23
+#define SYS_thread_exit           24
+#define SYS_condvar_release_sleep 25
+#define SYS_condvar_wakeup        26
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..f535079 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,47 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+uint64
+sys_thread_create(void)
+{
+  uint64 fcn, arg, stack;
+
+  argaddr(0, &fcn);
+  argaddr(1, &arg);
+  argaddr(2, &stack);
+
+  return clone(fcn, arg, stack);
+}
+
+uint64
+sys_thread_join(void)
+{
+  int thread_id;
+  argint(0, &thread_id);
+  return join(thread_id);
+}
+
+uint64
+sys_thread_exit(void)
+{
+  exit(0);
+  return 0;
+}
+
+uint64
+sys_condvar_release_sleep(void)
+{
+  uint64 condvar_mtx_lock_va;
+  argaddr(0, &condvar_mtx_lock_va);
+  return condvar_release_sleep(condvar_mtx_lock_va);
+}
+
+uint64
+sys_condvar_wakeup(void) {
+  int thread_id;
+  argint(0, &thread_id);
+  condvar_wakeup(thread_id);
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..1847f2d 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -296,6 +296,15 @@ uvmfree(pagetable_t pagetable, uint64 sz)
   freewalk(pagetable);
 }
 
+
+void
+thread_uvmfree(pagetable_t pagetable, uint64 sz)
+{
+  if(sz > 0)
+    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 0);
+  freewalk(pagetable);
+}
+
 // Given a parent process's page table, copy
 // its memory into a child's page table.
 // Copies both the page table and the
@@ -332,6 +341,33 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+int
+uvmmirror(pagetable_t old, pagetable_t new, uint64 old_sz, uint64 new_sz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+
+  old_sz = PGROUNDUP(old_sz);
+
+  for(i = old_sz; i < new_sz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 0);
+  return -1;
+}
+
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
diff --git a/user/abirtest.c b/user/abirtest.c
new file mode 100644
index 0000000..07236d8
--- /dev/null
+++ b/user/abirtest.c
@@ -0,0 +1,70 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "semaphore.h"
+
+
+
+struct balance {
+char name[32];
+int amount;
+};
+
+struct thread_mutex plock;
+
+int thread1, thread2, thread3;
+
+void f1(void *arg){
+sleep(50);
+thread_mutex_lock(&plock);
+printf("Thread1 exit\n");
+thread_mutex_unlock(&plock);
+thread_exit();
+}
+
+void f2(void *arg){
+sleep(10);
+thread_mutex_lock(&plock);
+printf("Thread2 exit\n");
+thread_mutex_unlock(&plock);
+thread_exit();
+}
+
+void f3(void *arg){
+thread_join(thread1);
+thread_join(thread2);
+thread_mutex_lock(&plock);
+printf("Thread3 exit\n");
+thread_mutex_unlock(&plock);
+thread_exit();
+}
+
+
+
+int main() {
+
+thread_mutex_init(&plock);
+
+void *s1, *s2, *s3;
+// int thread1, thread2, thread3;
+
+s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+s2 = malloc(4096);
+s3 = malloc(4096);
+
+//pthread_create(&thread1, NULL, incrementThread, NULL);
+//pthread_create(&thread2, NULL, checkValueThread, NULL);
+int b1 = 5;
+thread1 = thread_create(f1, (void*)&b1, s1);
+thread2 = thread_create(f2, (void*)&b1, s2);
+thread3 = thread_create(f3, (void*)&b1, s3);
+
+
+thread_join(thread3);
+
+
+printf("main finished");
+
+exit(0);
+
+}
\ No newline at end of file
diff --git a/user/ashttest1.c b/user/ashttest1.c
new file mode 100644
index 0000000..67cf998
--- /dev/null
+++ b/user/ashttest1.c
@@ -0,0 +1,94 @@
+#include "kernel/types.h"
+#include "user/user.h"
+#include "user/mutex.h"
+#include "user/condvar.h"
+#include "user/semaphore.h"
+
+
+struct thread_sem p, q, r;
+int c;
+int t0;
+int n = 0;
+int pid;
+int alive = 1;
+
+void new_line() {
+	for (int i = 0; i < 3; i++) {
+		if (__sync_bool_compare_and_swap(&c, i, (i + 1) % 3)) {
+			if (i == 2) {
+        if(__sync_bool_compare_and_swap(&alive, 1, 1)) {
+  		    printf("\n");
+          n++;
+
+          if (n == 10000) {
+            int t = uptime();
+            printf("finished in %d\n", (t - t0));
+            __sync_fetch_and_and(&alive, 0);
+            kill(pid);
+          }
+        }
+			}
+			return;
+		}
+	}
+}
+
+void thread_p(void*) {
+  for(;;) {
+    thread_sem_wait(&p);
+    thread_sem_wait(&p);
+    if(__sync_bool_compare_and_swap(&alive, 1, 1)) {
+      printf("p");
+    }
+    new_line();
+    thread_sem_post(&q);
+    thread_sem_post(&r);
+    // sleep(1);
+  }
+}
+
+void thread_q(void*) {
+  for(;;) {
+    thread_sem_wait(&q);
+    thread_sem_wait(&q);
+    if(__sync_bool_compare_and_swap(&alive, 1, 1)) {
+      printf("q");
+    }
+    new_line();
+    thread_sem_post(&r);
+    thread_sem_post(&p);
+    // sleep(1);
+  }
+}
+
+void thread_r(void*) {
+  for(;;) {
+    thread_sem_wait(&r);
+    thread_sem_wait(&r);
+    if(__sync_bool_compare_and_swap(&alive, 1, 1)) {
+      printf("r");
+    }
+    new_line();
+    thread_sem_post(&p);
+    thread_sem_post(&q);
+    // sleep(1);
+  }
+}
+
+int main() {
+  t0 = uptime();
+  pid = getpid();
+  thread_sem_init(&p, 2);
+  thread_sem_init(&q, 2);
+  thread_sem_init(&r, 2);
+  void *s1 = malloc(4096);
+  void *s2 = malloc(4096);
+  void *s3 = malloc(4096);
+  int th1 = thread_create(thread_p, 0, s1);
+  int th2 = thread_create(thread_q, 0, s2);
+  int th3 = thread_create(thread_r, 0, s3);
+  thread_join(th1);
+  thread_join(th2);
+  thread_join(th3);
+  return 0;
+}
\ No newline at end of file
diff --git a/user/ashttest2.c b/user/ashttest2.c
new file mode 100644
index 0000000..611d47e
--- /dev/null
+++ b/user/ashttest2.c
@@ -0,0 +1,155 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/mutex.h"
+#include "user/condvar.h"
+#include "user/semaphore.h"
+
+int N = 24;
+
+struct balance {
+  char name[32];
+  int amount;
+};
+
+volatile int total_balance = 0;
+
+volatile unsigned int delay(unsigned int d) {
+  unsigned int i;
+  for (i = 0; i < d; i++) {
+    __asm volatile("nop" :::);
+  }
+
+  return i;
+}
+
+volatile int _tid = 0;
+int *x[2];
+int n = 1000;
+
+struct thread_mutex printlock;
+struct thread_mutex smemlock;
+struct thread_mutex mlock;
+struct thread_mutex lock;
+struct thread_sem sem;
+
+int *smem;
+
+
+void do_work(void *arg) {
+  int i;
+  int old;
+  int tid;
+  tid = _tid++;
+
+  struct balance *b = (struct balance *)arg;
+  x[tid] = malloc(sizeof(int) * n);
+
+
+  for (int i = 0; i < n; i++) {
+    x[tid][i] = i;
+  }
+
+  for (i = 0; i < b->amount; i++) {
+    // lock and mlock will be implemented by you.
+    thread_mutex_lock(&lock);
+    thread_mutex_lock(&mlock);
+    old = total_balance;
+    delay(100000);
+    // if(old != total_balance)  printf("we will miss an update. old: %d
+    // total_balance: %d\n", old, total_balance);
+    total_balance = old + 1;
+    thread_mutex_unlock(&lock);
+    thread_mutex_unlock(&mlock);
+  }
+
+  for (int i = 0; i < n; i++) {
+    thread_mutex_lock(&smemlock);
+    smem[i]++;
+    delay(100000);
+    thread_mutex_unlock(&smemlock);
+  }
+
+  thread_sem_post(&sem);
+
+
+  thread_exit();
+  return;
+}
+
+void empty_task() {
+
+  for (int i = 0; i < n; i++) {
+    thread_mutex_lock(&smemlock);
+    smem[i]++;
+    delay(100000);
+    thread_mutex_unlock(&smemlock);
+  }
+
+  thread_sem_post(&sem);
+
+  int *x = (int*)malloc(sizeof(int)*n);
+  int i = 0;
+  while(1){
+    x[i]++;
+    i = (i + 1) % n;
+  }
+
+  thread_exit();
+  return;
+}
+
+int main(int argc, char *argv[]) {
+
+  struct balance b1 = {"b1", 3200};
+  struct balance b2 = {"b2", 2800};
+
+  void *s1, *s2, *s3;
+  int thread1, thread2, r1, r2;
+
+  thread_mutex_init(&printlock);
+  thread_mutex_init(&smemlock);
+  thread_mutex_init(&mlock);
+  thread_mutex_init(&lock);
+  thread_sem_init(&sem, 0);
+
+  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+  s2 = malloc(4096);
+
+  smem = malloc(sizeof(int) * n);
+  memset(smem, 0, sizeof(int) * n);
+
+  thread2 = thread_create(do_work, (void *)&b2, s2);
+  thread1 = thread_create(do_work, (void *)&b1, s1);
+
+  for(int i = 0; i < (N - 2); i++) {
+    s3 = malloc(4096);
+    thread_create(empty_task, 0, s3);
+  }
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+
+  for(int i = 0; i < N; i++){
+    thread_sem_wait(&sem);
+  }
+
+  printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n", thread1, r1,
+         thread2, r2, total_balance);
+  printf("Thread 1 malloced: %p\n", x[0]);
+  printf("Thread 2 malloced: %p\n", x[1]);
+  for (int i = 0; i < n; i++) {
+    if (x[0][i] != i || x[1][i] != i) {
+      printf("Doesn't match\n");
+      printf("%d vs %d for %d\n", x[0][i], x[1][i], i);
+      return 0;
+    }
+    if (smem[i] != N) {
+      printf("is't N\n");
+      printf("smem[i] = %d\n", smem[i]);
+      return 0;
+    }
+  }
+  printf("Passed\n");
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/condvar.c b/user/condvar.c
new file mode 100644
index 0000000..cfe665c
--- /dev/null
+++ b/user/condvar.c
@@ -0,0 +1,51 @@
+#include "kernel/types.h"
+#include "user/user.h"
+#include "condvar.h"
+
+void thread_condvar_init(struct thread_condvar *lk)
+{
+    queue_init(&lk->queue);
+    thread_mutex_init(&lk->queue_lock);
+}
+
+void thread_condvar_wait(struct thread_condvar *lk, struct thread_mutex *mx)
+{
+    thread_mutex_lock(&lk->queue_lock);
+    queue_push(&lk->queue, getpid());
+    thread_mutex_unlock(&lk->queue_lock);
+
+    condvar_release_sleep(&mx->locked);
+
+    thread_mutex_lock(mx);
+}
+
+void thread_condvar_signal(struct thread_condvar *lk)
+{
+    int thread_id = 0;
+
+    thread_mutex_lock(&lk->queue_lock);
+    thread_id = queue_front(&lk->queue);
+    thread_mutex_unlock(&lk->queue_lock);   
+    if(thread_id > 0) {
+        queue_pop(&lk->queue);
+        condvar_wakeup(thread_id);
+    }
+}
+
+void thread_condvar_broadcast(struct thread_condvar *lk)
+{
+    int thread_id = 0;
+
+    thread_mutex_lock(&lk->queue_lock);
+    while(1) {
+        thread_id = queue_front(&lk->queue);
+        if(thread_id > 0) {
+            queue_pop(&lk->queue);
+            condvar_wakeup(thread_id);
+        } 
+        else {
+            break;
+        }       
+    }
+    thread_mutex_unlock(&lk->queue_lock);  
+}
\ No newline at end of file
diff --git a/user/condvar.h b/user/condvar.h
new file mode 100644
index 0000000..38ba5f3
--- /dev/null
+++ b/user/condvar.h
@@ -0,0 +1,17 @@
+#ifndef THRD_CONDVAR
+#define THRD_CONDVAR
+
+#include "user/queue.h"
+#include "user/mutex.h"
+
+struct thread_condvar {
+    struct queue queue;
+    struct thread_mutex queue_lock;
+};
+
+void thread_condvar_init(struct thread_condvar *lk);
+void thread_condvar_wait(struct thread_condvar *lk, struct thread_mutex *mx);
+void thread_condvar_signal(struct thread_condvar *lk);
+void thread_condvar_broadcast(struct thread_condvar *lk);
+
+#endif
\ No newline at end of file
diff --git a/user/condvartest.c b/user/condvartest.c
new file mode 100644
index 0000000..57b1217
--- /dev/null
+++ b/user/condvartest.c
@@ -0,0 +1,76 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/mutex.h"
+#include "user/condvar.h"
+
+struct balance
+{
+    char name[32];
+    int amount;
+};
+
+// Shared data and synchronization variables
+int sharedValue = 0;
+// pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
+struct thread_mutex mutex;
+// pthread_cond_t condition = PTHREAD_COND_INITIALIZER;
+struct thread_condvar condition;
+
+// Thread function that increments the shared value
+void incrementThread(void *arg)
+{
+    for (int i = 0; i < 5; ++i)
+    {
+        thread_mutex_lock(&mutex);
+        sharedValue++;
+        printf("Incremented: %d\n", sharedValue);
+        thread_mutex_unlock(&mutex);
+        thread_condvar_signal(&condition); // Signal waiting threads
+        // thread_condvar_broadcast(&condition); // Signal waiting threads
+        sleep(1);
+    }
+    thread_exit();
+}
+
+// Thread function that waits until shared value is greater than a threshold
+void checkValueThread(void *arg)
+{
+    thread_mutex_lock(&mutex);
+    while (sharedValue <= 3)
+    {
+        thread_condvar_wait(&condition, &mutex); // Wait for condition and release mutex
+    }
+    printf("Condition met: %d\n", sharedValue);
+    thread_mutex_unlock(&mutex);
+    thread_exit();
+}
+
+int main()
+{
+    struct balance b1 = {"b1", 3200};
+    struct balance b2 = {"b2", 2800};
+
+    thread_mutex_init(&mutex);
+    thread_condvar_init(&condition);
+
+    void *s1, *s2;
+    int thread1, thread2, r1, r2;
+
+    s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+    s2 = malloc(4096);
+
+    // pthread_create(&thread1, NULL, incrementThread, NULL);
+    // pthread_create(&thread2, NULL, checkValueThread, NULL);
+
+    thread1 = thread_create(incrementThread, (void *)&b1, s1);
+    thread2 = thread_create(checkValueThread, (void *)&b2, s2);
+
+    r1 = thread_join(thread1);
+    r2 = thread_join(thread2);
+
+    printf("Threads finished: (%d):%d, (%d):%d\n",
+           thread1, r1, thread2, r2);
+
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/jointest.c b/user/jointest.c
new file mode 100644
index 0000000..1500be5
--- /dev/null
+++ b/user/jointest.c
@@ -0,0 +1,112 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/mutex.h"
+
+int thread1, thread2, thread3, thread4;
+int r1, r2, r3, r4, r5;
+
+struct balance {
+    char name[32];
+    int amount;
+};
+
+// struct thread_spinlock lock;
+struct thread_mutex mlock, plock;
+
+volatile int total_balance = 0;
+
+volatile unsigned int delay (unsigned int d) {
+   unsigned int i;
+   for (i = 0; i < d; i++) {
+       __asm volatile( "nop" ::: );
+   }
+
+   return i;
+}
+
+void do_work(void *arg){
+    int i;
+    int old;
+
+    struct balance *b = (struct balance*) arg;
+    //  thread_spin_lock(&lock);
+    thread_mutex_lock(&plock);
+    printf( "Starting do_work: s:%s\n", b->name);
+    thread_mutex_unlock(&plock);
+    //  thread_spin_unlock(&lock);
+
+    for (i = 0; i < b->amount; i++) {
+        // lock and mlock will be implemented by you.
+        //  thread_spin_lock(&lock);
+         thread_mutex_lock(&mlock);
+         old = total_balance;
+        //  if(b->amount == 3200) {
+        //     printf("B1\n");
+        //  }
+        //  if(b->amount == 2800) {
+        //     printf("B2\n");
+        //  }
+        //  if(b->amount == 2700) {
+        //     printf("B3\n");
+        //  }
+        //  if(b->amount == 2300) {
+        //     printf("B4\n");
+        //  }
+         delay(100000);
+	    //  if(old != total_balance)  printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
+         total_balance = old + 1;
+         thread_mutex_unlock(&mlock);
+        //  thread_spin_unlock(&lock);
+
+    }
+
+    if(b->amount == 3200)
+        r3 = thread_join(thread3);
+
+    if(b->amount == 2800)
+        // r5 = thread_join(thread3);
+        r4 = thread_join(thread4);
+
+    // thread_spin_lock(&lock);
+    thread_mutex_lock(&plock);
+    printf( "Done s:%x %s\n", b->name, b->name);
+    thread_mutex_unlock(&plock);
+    // thread_spin_unlock(&lock);
+
+    thread_exit();
+    return;
+}
+
+int main(int argc, char *argv[]) {
+
+  struct balance b1 = {"b1", 3200};
+  struct balance b2 = {"b2", 2800};
+  struct balance b3 = {"b3", 2700};
+  struct balance b4 = {"b4", 2300};
+
+//   thread_spin_init(&lock);
+  thread_mutex_init(&mlock);
+  thread_mutex_init(&plock);
+
+  void *s1, *s2, *s3, *s4;  
+
+  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+  s2 = malloc(4096);
+  s3 = malloc(4096);
+  s4 = malloc(4096);
+
+  thread1 = thread_create(do_work, (void*)&b1, s1);
+  thread2 = thread_create(do_work, (void*)&b2, s2);
+  thread3 = thread_create(do_work, (void*)&b3, s3);
+  thread4 = thread_create(do_work, (void*)&b4, s4);
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+//   r4 = thread_join(thread4);   
+
+  printf("Threads finished: (%d):%d, (%d):%d, (%d):%d {%d}, (%d):%d, shared balance:%d\n",
+      thread1, r1, thread2, r2, thread3, r3, r5, thread4, r4, total_balance);
+
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/mtxtest.c b/user/mtxtest.c
new file mode 100644
index 0000000..9a5d732
--- /dev/null
+++ b/user/mtxtest.c
@@ -0,0 +1,148 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/spinlock.h"
+#include "user/mutex.h"
+
+struct balance {
+  char name[32];
+  int amount;
+};
+
+volatile int total_balance = 0;
+
+volatile unsigned int delay(unsigned int d) {
+  unsigned int i;
+  for (i = 0; i < d; i++) {
+    __asm volatile("nop" :::);
+  }
+
+  return i;
+}
+
+int *x[2];
+int n = 10000;
+
+struct thread_mutex printlock;
+struct thread_mutex smemlock;
+struct thread_mutex mlock;
+struct thread_mutex lock;
+
+int *smem;
+
+void do_work(void *arg) {
+  int i;
+  int old;
+  int tid = 0;
+  struct balance *b = (struct balance *)arg;
+
+  if(b->amount == 2800) {
+    tid = 1;
+  }
+
+  x[tid] = malloc(sizeof(int) * n);
+
+
+  for (int i = 0; i < n; i++) {
+    x[tid][i] = i;
+  }
+
+  for (i = 0; i < b->amount; i++) {
+    // lock and mlock will be implemented by you.
+    // thread_mutex_lock(&lock);
+    thread_mutex_lock(&mlock);
+    old = total_balance;
+    delay(100000);
+    // if(old != total_balance)  printf("we will miss an update. old: %d
+    // total_balance: %d\n", old, total_balance);
+    total_balance = old + 1;
+    // thread_mutex_unlock(&lock);
+    thread_mutex_unlock(&mlock);
+  }
+
+  for (int i = 0; i < n; i++) {
+    thread_mutex_lock(&smemlock);
+    smem[i]++;
+    delay(100000);
+    thread_mutex_unlock(&smemlock);
+  }
+
+
+  thread_exit();
+  return;
+}
+
+void empty_task() {
+
+  for (int i = 0; i < n; i++) {
+    thread_mutex_lock(&smemlock);
+    smem[i]++;
+    delay(100000);
+    thread_mutex_unlock(&smemlock);
+  }
+
+  int *x = (int*)malloc(sizeof(int)*n);
+//   int i = 0;
+//   while(1){
+//     x[i]++;
+//     i = (i + 1) % n;
+//   }
+    for(int i = 0; i < n; i++) {
+        x[i] = i * 2;
+    }
+
+  thread_exit();
+  return;
+}
+
+int main(int argc, char *argv[]) {
+
+  struct balance b1 = {"b1", 3200};
+  struct balance b2 = {"b2", 2800};
+
+  void *s1, *s2, *s3;
+  int thread1, thread2, threads[10], r1, r2;
+
+  thread_mutex_init(&printlock);
+  thread_mutex_init(&smemlock);
+  thread_mutex_init(&mlock);
+  thread_mutex_init(&lock);
+
+  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+  s2 = malloc(4096);
+
+  smem = malloc(sizeof(int) * n);
+
+  thread2 = thread_create(do_work, (void *)&b2, s2);
+  thread1 = thread_create(do_work, (void *)&b1, s1);
+
+  for(int i = 0; i < 10; i++) {
+    s3 = malloc(4096);
+    threads[i] = thread_create(empty_task, 0, s3);
+  }
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+
+  for(int i = 0; i < 10; i++) {
+    thread_join(threads[i]);
+  }
+
+  printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n", thread1, r1,
+         thread2, r2, total_balance);
+  printf("Thread 1 malloced: %p\n", x[0]);
+  printf("Thread 2 malloced: %p\n", x[1]);
+  for (int i = 0; i < n; i++) {
+    if (x[0][i] != i || x[1][i] != i) {
+      printf("Doesn't match\n");
+      printf("%d vs %d for %d\n", x[0][i], x[1][i], i);
+      return 0;
+    }
+    if (smem[i] != 12) {
+      printf("is't 12\n");
+      return 0;
+    }
+  }
+  printf("Match\n");
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/mutex.c b/user/mutex.c
new file mode 100644
index 0000000..386b6d0
--- /dev/null
+++ b/user/mutex.c
@@ -0,0 +1,25 @@
+// Sleeping locks
+
+#include "kernel/types.h"
+#include "user/user.h"
+#include "user/mutex.h"
+
+void thread_mutex_init(struct thread_mutex *lk)
+{
+  lk->locked = 0;
+}
+
+void thread_mutex_lock(struct thread_mutex *lk)
+{
+  while (__sync_lock_test_and_set(&lk->locked, 1) != 0)
+  {
+    sleep(1);
+  }
+  __sync_synchronize();
+}
+
+void thread_mutex_unlock(struct thread_mutex *lk)
+{
+  __sync_synchronize();
+  __sync_lock_release(&lk->locked);
+}
\ No newline at end of file
diff --git a/user/mutex.h b/user/mutex.h
new file mode 100644
index 0000000..1901144
--- /dev/null
+++ b/user/mutex.h
@@ -0,0 +1,12 @@
+#ifndef THRD_MUTEX
+#define THRD_MUTEX
+
+struct thread_mutex {
+  volatile uint8 locked;       // Is the lock held?
+};
+
+void thread_mutex_init(struct thread_mutex *lk);
+void thread_mutex_lock(struct thread_mutex *lk);
+void thread_mutex_unlock(struct thread_mutex *lk);
+
+#endif
\ No newline at end of file
diff --git a/user/producer_consumer.c b/user/producer_consumer.c
new file mode 100644
index 0000000..07b4eec
--- /dev/null
+++ b/user/producer_consumer.c
@@ -0,0 +1,109 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/queue.h"
+#include "user/mutex.h"
+#include "user/semaphore.h"
+
+struct queue q;
+// a mutex object lock
+struct thread_mutex lock;
+// a semaphore object empty
+struct thread_sem empty;
+// a semaphore object full
+struct thread_sem full;
+// to lock console
+struct thread_mutex plock;
+
+void init_semaphore()
+{
+    // initialize mutex lock
+    thread_mutex_init(&lock);
+    thread_mutex_init(&plock);
+    // initialize semaphore empty with 5
+    thread_sem_init(&empty, 5);
+    // initialize semaphore full with 0
+    thread_sem_init(&full, 0);
+}
+
+void ProducerFunc(void *arg)
+{
+    thread_mutex_lock(&plock);
+    printf("%s\n", (char *)arg);
+    thread_mutex_unlock(&plock);
+    int i;
+    for (i = 1; i <= 10; i++)
+    {
+        // wait for semphore empty
+        thread_sem_wait(&empty);
+        // wait for mutex lock
+
+        sleep(1);
+        thread_mutex_lock(&lock);
+
+        queue_push(&q, i);
+        thread_mutex_lock(&plock);
+        printf("producer produced item %d\n", i);
+        thread_mutex_unlock(&plock);
+
+        // unlock mutex lock
+        thread_mutex_unlock(&lock);
+        // post semaphore full
+        thread_sem_post(&full);
+    }
+    thread_exit();
+}
+
+void ConsumerFunc(void *arg)
+{
+    thread_mutex_lock(&plock);
+    printf("%s\n", (char *)arg);
+    thread_mutex_unlock(&plock);
+    int i;
+    for (i = 1; i <= 10; i++)
+    {
+        // wait for semphore full
+        thread_sem_wait(&full);
+        // wait for mutex lock
+
+        sleep(1);
+        thread_mutex_lock(&lock);
+
+        int item = queue_front(&q);
+        queue_pop(&q);
+
+        thread_mutex_lock(&plock);
+        printf("consumer consumed item %d\n", item);
+        thread_mutex_unlock(&plock);
+
+        // unlock mutex lock
+        thread_mutex_unlock(&lock);
+        // post semaphore empty
+        thread_sem_post(&empty);
+    }
+    thread_exit();
+}
+
+int main(void)
+{
+
+    queue_init(&q);
+    init_semaphore();
+
+    char *message1 = "i am producer";
+    char *message2 = "i am consumer";
+
+    void *s1, *s2;
+    int thread1, thread2;
+
+    s1 = malloc(4096);
+    s2 = malloc(4096);
+
+    thread2 = thread_create(ConsumerFunc, (void *)message2, s2);
+    thread1 = thread_create(ProducerFunc, (void *)message1, s1);
+
+    thread_join(thread2);
+    thread_join(thread1);
+
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/queue.c b/user/queue.c
new file mode 100644
index 0000000..570b358
--- /dev/null
+++ b/user/queue.c
@@ -0,0 +1,20 @@
+#include "queue.h"
+
+void queue_init(struct queue *q) {
+    q->front = q->rear = q->size = 0;
+}
+void queue_push(struct queue *q, int x) {
+    q->arr[q->rear] = x;
+    q->rear = (q->rear + 1) % 118;
+    q->size++;
+}
+int queue_front(struct queue *q) {
+    if(q->size <= 0) {
+        return -1;
+    }
+    return q->arr[q->front];
+}
+void queue_pop(struct queue *q) {
+    q->front = (q->front + 1) % 118;
+    q->size--;
+}
\ No newline at end of file
diff --git a/user/queue.h b/user/queue.h
new file mode 100644
index 0000000..e9dfe04
--- /dev/null
+++ b/user/queue.h
@@ -0,0 +1,17 @@
+#ifndef QUEUE_H
+#define QUEUE_H
+
+struct queue
+{
+    int arr[118];
+    int front;
+    int rear;
+    int size;
+};
+
+void queue_init(struct queue *q);
+void queue_push(struct queue *q, int x);
+int queue_front(struct queue *q);
+void queue_pop(struct queue *q);
+
+#endif
\ No newline at end of file
diff --git a/user/semaphore.c b/user/semaphore.c
new file mode 100644
index 0000000..5a6df86
--- /dev/null
+++ b/user/semaphore.c
@@ -0,0 +1,28 @@
+#include "kernel/types.h"
+#include "user/semaphore.h"
+
+void thread_sem_init(struct thread_sem *sem, int value)
+{
+    sem->value = value;
+    thread_condvar_init(&sem->cond);
+    thread_mutex_init(&sem->mx);
+}
+
+void thread_sem_wait(struct thread_sem *sem)
+{
+    thread_mutex_lock(&sem->mx);
+    while (sem->value <= 0)
+    {
+        thread_condvar_wait(&sem->cond, &sem->mx);
+    }
+    sem->value--;
+    thread_mutex_unlock(&sem->mx);
+}
+
+void thread_sem_post(struct thread_sem *sem)
+{
+    thread_mutex_lock(&sem->mx);
+    thread_condvar_signal(&sem->cond);
+    sem->value++;
+    thread_mutex_unlock(&sem->mx);
+}
\ No newline at end of file
diff --git a/user/semaphore.h b/user/semaphore.h
new file mode 100644
index 0000000..20dc8fa
--- /dev/null
+++ b/user/semaphore.h
@@ -0,0 +1,17 @@
+#ifndef THRD_SEM
+#define THRD_SEM
+
+#include "user/mutex.h"
+#include "user/condvar.h"
+
+struct thread_sem {
+    int value;
+    struct thread_condvar cond;
+    struct thread_mutex mx; 
+};
+
+void thread_sem_init(struct thread_sem *sem, int value);
+void thread_sem_wait(struct thread_sem *sem);
+void thread_sem_post(struct thread_sem *sem);
+
+#endif
\ No newline at end of file
diff --git a/user/semtest.c b/user/semtest.c
new file mode 100644
index 0000000..16da99a
--- /dev/null
+++ b/user/semtest.c
@@ -0,0 +1,80 @@
+#include "kernel/types.h"
+#include "user/user.h"
+#include "user/semaphore.h"
+
+struct thread_sem p, q, r;
+int c;
+
+void new_line()
+{
+    for (int i = 0; i < 3; i++)
+    {
+        if (__sync_bool_compare_and_swap(&c, i, (i + 1) % 3))
+        {
+            if (i == 2)
+            {
+                printf("\n");
+            }
+            return;
+        }
+    }
+}
+
+void thread_p(void *)
+{
+    for (;;)
+    {
+        thread_sem_wait(&p);
+        thread_sem_wait(&p);
+        printf("p");
+        new_line();
+        thread_sem_post(&q);
+        thread_sem_post(&r);
+        sleep(10);
+    }
+}
+
+void thread_q(void *)
+{
+    for (;;)
+    {
+        thread_sem_wait(&q);
+        thread_sem_wait(&q);
+        printf("q");
+        new_line();
+        thread_sem_post(&r);
+        thread_sem_post(&p);
+        sleep(10);
+    }
+}
+
+void thread_r(void *)
+{
+    for (;;)
+    {
+        thread_sem_wait(&r);
+        thread_sem_wait(&r);
+        printf("r");
+        new_line();
+        thread_sem_post(&p);
+        thread_sem_post(&q);
+        sleep(10);
+    }
+}
+
+int main()
+{
+    thread_sem_init(&p, 2);
+    thread_sem_init(&q, 2);
+    thread_sem_init(&r, 2);
+    void *s1 = malloc(4096);
+    void *s2 = malloc(4096);
+    void *s3 = malloc(4096);
+    int th1 = thread_create(thread_p, 0, s1);
+    int th2 = thread_create(thread_q, 0, s2);
+    int th3 = thread_create(thread_r, 0, s3);
+    thread_join(th1);
+    thread_join(th2);
+    thread_join(th3);
+    return 0;
+}
\ No newline at end of file
diff --git a/user/spinlock.c b/user/spinlock.c
new file mode 100644
index 0000000..a52e8c7
--- /dev/null
+++ b/user/spinlock.c
@@ -0,0 +1,55 @@
+// Mutual exclusion spin locks.
+
+#include "kernel/types.h"
+#include "user/spinlock.h"
+
+void
+thread_spin_init(struct thread_spinlock *lk)
+{
+  lk->locked = 0;
+}
+
+// Acquire the lock.
+// Loops (spins) until the lock is acquired.
+void
+thread_spin_lock(struct thread_spinlock *lk)
+{
+
+  // On RISC-V, sync_lock_test_and_set turns into an atomic swap:
+  //   a5 = 1
+  //   s1 = &lk->locked
+  //   amoswap.w.aq a5, a5, (s1)
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
+    ;
+
+  // Tell the C compiler and the processor to not move loads or stores
+  // past this point, to ensure that the critical section's memory
+  // references happen strictly after the lock is acquired.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+}
+
+// Release the lock.
+void
+thread_spin_unlock(struct thread_spinlock *lk)
+{
+
+  // Tell the C compiler and the CPU to not move loads or stores
+  // past this point, to ensure that all the stores in the critical
+  // section are visible to other CPUs before the lock is released,
+  // and that loads in the critical section occur strictly before
+  // the lock is released.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Release the lock, equivalent to lk->locked = 0.
+  // This code doesn't use a C assignment, since the C standard
+  // implies that an assignment might be implemented with
+  // multiple store instructions.
+  // On RISC-V, sync_lock_release turns into an atomic swap:
+  //   s1 = &lk->locked
+  //   amoswap.w zero, zero, (s1)
+  __sync_lock_release(&lk->locked);
+
+}
diff --git a/user/spinlock.h b/user/spinlock.h
new file mode 100644
index 0000000..9098874
--- /dev/null
+++ b/user/spinlock.h
@@ -0,0 +1,13 @@
+// Mutual exclusion lock.
+#ifndef THRD_SPINLOCK
+#define THRD_SPINLOCK
+
+struct thread_spinlock {
+  volatile uint8 locked;       // Is the lock held?
+};
+
+void thread_spin_init(struct thread_spinlock *lk);
+void thread_spin_lock(struct thread_spinlock *lk);
+void thread_spin_unlock(struct thread_spinlock *lk);
+
+#endif
\ No newline at end of file
diff --git a/user/threads.c b/user/threads.c
new file mode 100644
index 0000000..bb3829a
--- /dev/null
+++ b/user/threads.c
@@ -0,0 +1,98 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/spinlock.h"
+#include "user/mutex.h"
+
+struct balance {
+    char name[32];
+    int amount;
+};
+
+// struct thread_spinlock lock;
+struct thread_mutex mlock, plock;
+
+volatile int total_balance = 0;
+
+volatile unsigned int delay (unsigned int d) {
+   unsigned int i;
+   for (i = 0; i < d; i++) {
+       __asm volatile( "nop" ::: );
+   }
+
+   return i;
+}
+
+void do_work(void *arg){
+    int i;
+    int old;
+
+    struct balance *b = (struct balance*) arg;
+    //  thread_spin_lock(&lock);
+    thread_mutex_lock(&plock);
+    printf( "Starting do_work: s:%s\n", b->name);
+    thread_mutex_unlock(&plock);
+    //  thread_spin_unlock(&lock);
+
+    for (i = 0; i < b->amount; i++) {
+        // lock and mlock will be implemented by you.
+        //  thread_spin_lock(&lock);
+         thread_mutex_lock(&mlock);
+         old = total_balance;
+        //  if(b->amount == 3200) {
+        //     printf("B1\n");
+        //  }
+        //  if(b->amount == 2800) {
+        //     printf("B2\n");
+        //  }
+        //  if(b->amount == 2700) {
+        //     printf("B3\n");
+        //  }
+        //  if(b->amount == 2300) {
+        //     printf("B4\n");
+        //  }
+         delay(100000);
+	    //  if(old != total_balance)  printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
+         total_balance = old + 1;
+         thread_mutex_unlock(&mlock);
+        //  thread_spin_unlock(&lock);
+
+    }
+
+    // thread_spin_lock(&lock);
+    thread_mutex_lock(&plock);
+    printf( "Done s:%x %s\n", b->name, b->name);
+    thread_mutex_unlock(&plock);
+    // thread_spin_unlock(&lock);
+
+    thread_exit();
+    return;
+}
+
+int main(int argc, char *argv[]) {
+
+  struct balance b1 = {"b1", 3200};
+  struct balance b2 = {"b2", 2800};
+
+//   thread_spin_init(&lock);
+  thread_mutex_init(&mlock);
+  thread_mutex_init(&plock);
+
+  void *s1, *s2;
+  int thread1, thread2;
+  int r1, r2;
+
+  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+  s2 = malloc(4096);
+
+  thread1 = thread_create(do_work, (void*)&b1, s1);
+  thread2 = thread_create(do_work, (void*)&b2, s2);
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+
+  printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n",
+      thread1, r1, thread2, r2, total_balance);
+
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..06dd8fc 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,11 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int thread_create(void(*fcn)(void*), void *arg, void* stack);
+int thread_join(int thread_id);
+int thread_exit(void);
+int condvar_release_sleep(volatile uint8*);
+int condvar_wakeup(int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..8c2e064 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,8 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create");
+entry("thread_join");
+entry("thread_exit");
+entry("condvar_release_sleep");
+entry("condvar_wakeup");
